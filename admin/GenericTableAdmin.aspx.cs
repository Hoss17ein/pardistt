using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.IO;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace shop1.Admin
{
    public partial class GenericTableAdmin : System.Web.UI.Page
    {
        private string ConnectionString
        {
            get { return ConfigurationManager.ConnectionStrings["my dataConnectionString"].ConnectionString; }
        }
        private string TableName => (Request.QueryString["t"] ?? string.Empty).Trim();
        // Property for storing column information in ViewState
        private List<ColumnInfo> Columns
        {
            get
            {
                var list = ViewState["Columns"] as List<ColumnInfo>;
                if (list == null)
                {
                    list = new List<ColumnInfo>();
                    ViewState["Columns"] = list;
                }
                return list;
            }
            set { ViewState["Columns"] = value; }
        }

        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);
            if (!string.IsNullOrEmpty(TableName))
            {
                EnsureColumnsLoaded();
                BuildInsertForm();
            }
        }

        private void EnsureColumnsLoaded()
        {
            if (Columns == null || Columns.Count == 0)
            {
                Columns = LoadColumns();
            }
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!shop1.AdminAuth.IsAdminAuthenticated())
            {
                Response.Redirect("Login.aspx");
                return;
            }

            if (string.IsNullOrEmpty(TableName))
            {
                ShowMessage("نام جدول مشخص نیست. از طریق لینک‌های منو وارد شوید.", true);
                return;
            }

            litTableName.Text = TableName;

            if (!IsPostBack)
            {
                EnsureColumnsLoaded();
                BindGrid();
            }
        }

        private List<ColumnInfo> LoadColumns()
        {
            var columns = new List<ColumnInfo>();
            using (var conn = new SqlConnection(ConnectionString))
            {
                conn.Open();
                using (var cmd = new SqlCommand(@"SELECT c.COLUMN_NAME, c.DATA_TYPE, c.IS_NULLABLE,
                          COLUMNPROPERTY(object_id(c.TABLE_SCHEMA + '.' + c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as IsIdentity,
                          CASE WHEN k.COLUMN_NAME IS NOT NULL THEN 1 ELSE 0 END AS IsPrimaryKey
                    FROM INFORMATION_SCHEMA.COLUMNS c
                    LEFT JOIN (
                        SELECT ku.COLUMN_NAME
                        FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc
                        JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE ku ON tc.CONSTRAINT_NAME = ku.CONSTRAINT_NAME
                        WHERE tc.TABLE_NAME = @tbl AND tc.CONSTRAINT_TYPE = 'PRIMARY KEY'
                    ) k ON c.COLUMN_NAME = k.COLUMN_NAME
                    WHERE c.TABLE_NAME = @tbl
                    ORDER BY c.ORDINAL_POSITION", conn))
                {
                    cmd.Parameters.AddWithValue("@tbl", TableName);
                    using (var r = cmd.ExecuteReader())
                    {
                        while (r.Read())
                        {
                            columns.Add(new ColumnInfo
                            {
                                Name = r["COLUMN_NAME"].ToString(),
                                DataType = r["DATA_TYPE"].ToString(),
                                IsNullable = string.Equals(r["IS_NULLABLE"].ToString(), "YES", StringComparison.OrdinalIgnoreCase),
                                IsIdentity = Convert.ToInt32(r["IsIdentity"]) == 1,
                                IsPrimaryKey = Convert.ToInt32(r["IsPrimaryKey"]) == 1
                            });
                        }
                    }
                }
            }
            return columns;
        }

        private void BindGrid()
        {
            using (var conn = new SqlConnection(ConnectionString))
            using (var da = new SqlDataAdapter($"SELECT * FROM [{TableName}] ORDER BY 1 DESC", conn))
            {
                var dt = new DataTable();
                da.Fill(dt);
                gvData.AutoGenerateEditButton = true;
                gvData.AutoGenerateDeleteButton = true;
                // Set DataKeyNames to first PK or Id column if exists
                string keyCol = Columns.FirstOrDefault(c => c.IsPrimaryKey)?.Name
                                ?? Columns.FirstOrDefault(c => string.Equals(c.Name, "Id", StringComparison.OrdinalIgnoreCase))?.Name
                                ?? Columns.First().Name;
                gvData.DataKeyNames = new[] { keyCol };
                gvData.DataSource = dt;
                gvData.DataBind();
            }
        }

        private void BuildInsertForm()
        {
            phInsert.Controls.Clear();
            if (Columns == null || Columns.Count == 0)
            {
                ShowMessage("ستونی برای درج مقدار یافت نشد.", true);
                return;
            }
            foreach (var col in Columns)
            {
                if (col.IsIdentity) continue; // skip identity on insert
                var label = new Literal { Text = $"<div style='margin:6px 0'>{col.Name}</div>" };
                phInsert.Controls.Add(label);

                if (IsImageColumn(col.Name))
                {
                    var fu = new FileUpload { ID = "file_" + col.Name, CssClass = "form-control" };
                    phInsert.Controls.Add(fu);
                }
                else if (string.Equals(col.DataType, "bit", StringComparison.OrdinalIgnoreCase))
                {
                    var chk = new CheckBox { ID = "chk_" + col.Name, CssClass = "form-check-input" };
                    phInsert.Controls.Add(chk);
                }
                else
                {
                    var tb = new TextBox { ID = "ins_" + col.Name, CssClass = "form-control", Width = Unit.Pixel(300) };
                    if (IsDateLike(col.DataType))
                    {
                        tb.ToolTip = "yyyy-MM-dd یا yyyy/MM/dd";
                        tb.Text = string.Empty;
                    }
                    phInsert.Controls.Add(tb);
                }
            }
        }

        protected void btnInsert_Click(object sender, EventArgs e)
        {
            var insertable = Columns.Where(c => !c.IsIdentity).ToList();
            // Validate required (NOT NULL) fields before building SQL
            foreach (var c in insertable)
            {
                if (!c.IsNullable)
                {
                    if (IsImageColumn(c.Name))
                    {
                        var fuReq = (FileUpload)phInsert.FindControl("file_" + c.Name);
                        if (fuReq == null || !fuReq.HasFile)
                        {
                            ShowMessage("وارد کردن/آپلود مقدار برای فیلد '" + c.Name + "' الزامی است.", true);
                            return;
                        }
                    }
                    else if (!string.Equals(c.DataType, "bit", StringComparison.OrdinalIgnoreCase))
                    {
                        var tbReq = (TextBox)phInsert.FindControl("ins_" + c.Name);
                        if (tbReq == null || string.IsNullOrWhiteSpace(tbReq.Text))
                        {
                            // برای فیلدهای تاریخ که غالباً مقدار پیش‌فرض باید زمان حال باشد
                            if (IsDateLike(c.DataType) && NameSuggestsCreatedAt(c.Name))
                            {
                                // اجازه می‌دهیم خالی باشد و بعداً مقداردهی کنیم
                            }
                            else
                            {
                                ShowMessage("وارد کردن مقدار برای فیلد '" + c.Name + "' الزامی است.", true);
                                return;
                            }
                        }
                    }
                }
            }
            var insertParams = insertable
                .Where(c => !string.IsNullOrWhiteSpace(c.Name))
                .Select((c, i) => new { Col = c, Param = "@p" + i })
                .ToList();
            if (insertParams.Count == 0)
            {
                ShowMessage("ستونی برای درج مقدار یافت نشد.", true);
                return;
            }

            // Build safe column list and params; verify counts
            var colItems = insertParams.Select(x => "[" + x.Col.Name + "]").Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
            var paramItems = insertParams.Select(x => x.Param).Where(s => !string.IsNullOrWhiteSpace(s)).ToList();
            if (colItems.Count == 0 || paramItems.Count == 0 || colItems.Count != paramItems.Count)
            {
                ShowMessage("ایجاد لیست ستون/پارامتر نامعتبر است. لطفاً اسامی ستون‌ها را بررسی کنید.", true);
                return;
            }
            string colList = string.Join(",", colItems);
            string paramList = string.Join(",", paramItems);
            string sql = "INSERT INTO [" + TableName + "] (" + colList + ") VALUES (" + paramList + ")";

            try
            {
                using (var conn = new SqlConnection(ConnectionString))
                using (var cmd = new SqlCommand(sql, conn))
                {
                    foreach (var x in insertParams)
                    {
                        object value = DBNull.Value;
                        if (IsImageColumn(x.Col.Name))
                        {
                            var fu = (FileUpload)phInsert.FindControl("file_" + x.Col.Name);
                            if (fu != null && fu.HasFile)
                            {
                                string uploads = Server.MapPath("~/images/uploads");
                                if (!Directory.Exists(uploads)) Directory.CreateDirectory(uploads);
                                string unique = DateTime.UtcNow.ToString("yyyyMMdd_HHmmss_fff") + Path.GetExtension(fu.FileName);
                                string savePath = Path.Combine(uploads, unique);
                                fu.SaveAs(savePath);
                                value = "images/uploads/" + unique;
                            }
                            else if (!x.Col.IsNullable)
                            {
                                ShowMessage("آپلود تصویر برای فیلد '" + x.Col.Name + "' الزامی است.", true);
                                return;
                            }
                        }
                        else if (string.Equals(x.Col.DataType, "bit", StringComparison.OrdinalIgnoreCase))
                        {
                            var chk = (CheckBox)phInsert.FindControl("chk_" + x.Col.Name);
                            value = chk != null && chk.Checked;
                        }
                        else if (IsIntegerLike(x.Col.DataType))
                        {
                            var tb = (TextBox)phInsert.FindControl("ins_" + x.Col.Name);
                            int iv;
                            if (tb != null && int.TryParse(tb.Text, out iv)) value = iv;
                            else if (string.IsNullOrWhiteSpace(tb?.Text)) value = x.Col.IsNullable ? (object)DBNull.Value : 0;
                            else { ShowMessage("مقدار عددی معتبر برای '" + x.Col.Name + "' وارد کنید.", true); return; }
                        }
                        else if (IsDecimalLike(x.Col.DataType))
                        {
                            var tb = (TextBox)phInsert.FindControl("ins_" + x.Col.Name);
                            decimal dv;
                            if (tb != null && decimal.TryParse(tb.Text, out dv)) value = dv;
                            else if (string.IsNullOrWhiteSpace(tb?.Text)) value = x.Col.IsNullable ? (object)DBNull.Value : 0m;
                            else { ShowMessage("مقدار عددی اعشاری معتبر برای '" + x.Col.Name + "' وارد کنید.", true); return; }
                        }
                        else if (IsDateLike(x.Col.DataType))
                        {
                            var tb = (TextBox)phInsert.FindControl("ins_" + x.Col.Name);
                            DateTime dt;
                            if (tb != null && DateTime.TryParse(tb.Text, out dt)) value = dt;
                            else if (string.IsNullOrWhiteSpace(tb?.Text))
                                value = NameSuggestsCreatedAt(x.Col.Name) ? (object)DateTime.Now : (x.Col.IsNullable ? (object)DBNull.Value : (object)DateTime.Now);
                            else { ShowMessage("تاریخ معتبر برای '" + x.Col.Name + "' وارد کنید.", true); return; }
                        }
                        else
                        {
                            var tb = (TextBox)phInsert.FindControl("ins_" + x.Col.Name);
                            value = (object)(tb?.Text ?? string.Empty) ?? DBNull.Value;
                        }

                        cmd.Parameters.AddWithValue(x.Param, value ?? DBNull.Value);
                    }
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {
                string details = "Table: " + TableName + "<br/>Cols: " + colList + "<br/>Params: " + paramList + "<br/>" + sql;
                ShowMessage("خطا در اجرای درج: " + ex.Message + "<br/>" + details, true);
                return;
            }
            ShowMessage("رکورد با موفقیت افزوده شد.", false);
            BindGrid();
        }

        protected void gvData_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            gvData.PageIndex = e.NewPageIndex;
            BindGrid();
        }

        protected void gvData_RowEditing(object sender, GridViewEditEventArgs e)
        {
            gvData.EditIndex = e.NewEditIndex;
            BindGrid();
        }

        protected void gvData_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        {
            gvData.EditIndex = -1;
            BindGrid();
        }

        protected void gvData_RowUpdating(object sender, GridViewUpdateEventArgs e)
        {
            string keyCol = gvData.DataKeyNames[0];
            var keyVal = gvData.DataKeys[e.RowIndex].Value;

            var updateCols = new List<string>();
            var parameters = new List<SqlParameter>();
            foreach (var col in Columns)
            {
                if (string.Equals(col.Name, keyCol, StringComparison.OrdinalIgnoreCase)) continue;
                var newVal = e.NewValues[col.Name];
                updateCols.Add($"[{col.Name}] = @{col.Name}");
                parameters.Add(new SqlParameter("@" + col.Name, newVal ?? DBNull.Value));
            }

            string sql = $"UPDATE [{TableName}] SET " + string.Join(",", updateCols) + $" WHERE [{keyCol}] = @key";
            using (var conn = new SqlConnection(ConnectionString))
            using (var cmd = new SqlCommand(sql, conn))
            {
                cmd.Parameters.AddRange(parameters.ToArray());
                cmd.Parameters.AddWithValue("@key", keyVal);
                conn.Open();
                cmd.ExecuteNonQuery();
            }
            gvData.EditIndex = -1;
            ShowMessage("رکورد ویرایش شد.", false);
            BindGrid();
        }

        protected void gvData_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            string keyCol = gvData.DataKeyNames[0];
            var keyVal = gvData.DataKeys[e.RowIndex].Value;
            using (var conn = new SqlConnection(ConnectionString))
            using (var cmd = new SqlCommand($"DELETE FROM [{TableName}] WHERE [{keyCol}] = @key", conn))
            {
                cmd.Parameters.AddWithValue("@key", keyVal);
                conn.Open();
                cmd.ExecuteNonQuery();
            }
            ShowMessage("رکورد حذف شد.", false);
            BindGrid();
        }

        protected void btnSeed_Click(object sender, EventArgs e)
        {
            try
            {
                EnsureColumnsLoaded();
                // حداقل ستون‌های رایج در بنر
                var map = Columns.ToDictionary(c => c.Name.ToLowerInvariant(), c => c);

                // مقادیر پیش‌فرض
                var samples = new[]
                {
                    new { ImageUrl = "images/uploads/sample1.jpg", LinkUrl = "store.aspx?cat=Clothing", Title = "بنر 1", AltText = "بنر 1", IsActive = true, SortOrder = 1 },
                    new { ImageUrl = "images/uploads/sample2.jpg", LinkUrl = "store.aspx?cat=Shoes",    Title = "بنر 2", AltText = "بنر 2", IsActive = true, SortOrder = 2 },
                    new { ImageUrl = "images/uploads/sample3.jpg", LinkUrl = "store.aspx?cat=Bags",     Title = "بنر 3", AltText = "بنر 3", IsActive = true, SortOrder = 3 },
                    new { ImageUrl = "images/uploads/sample4.jpg", LinkUrl = "store.aspx?cat=Sale",     Title = "بنر 4", AltText = "بنر 4", IsActive = true, SortOrder = 4 },
                };

                using (var conn = new SqlConnection(ConnectionString))
                {
                    conn.Open();
                    foreach (var s in samples)
                    {
                        var cols = new List<string>();
                        var prms = new List<string>();
                        var cmd = new SqlCommand();
                        cmd.Connection = conn;

                        AddIfColumn(map, cmd, cols, prms, "ImageUrl", s.ImageUrl);
                        AddIfColumn(map, cmd, cols, prms, "LinkUrl", s.LinkUrl);
                        AddIfColumn(map, cmd, cols, prms, "Title", s.Title);
                        AddIfColumn(map, cmd, cols, prms, "AltText", s.AltText);
                        AddIfColumn(map, cmd, cols, prms, "IsActive", true);
                        AddIfColumn(map, cmd, cols, prms, "SortOrder", s.SortOrder);
                        AddIfColumn(map, cmd, cols, prms, "StartDate", DateTime.Now);
                        AddIfColumn(map, cmd, cols, prms, "EndDate", DateTime.Now.AddDays(30));
                        AddIfColumn(map, cmd, cols, prms, "CreatedAt", DateTime.Now);

                        if (cols.Count == 0) { continue; }
                        cmd.CommandText = "INSERT INTO [" + TableName + "] (" + string.Join(",", cols) + ") VALUES (" + string.Join(",", prms) + ")";
                        cmd.ExecuteNonQuery();
                    }
                }

                ShowMessage("۴ رکورد پیش‌فرض افزوده شد. حالا می‌توانید مقادیرشان را ویرایش کنید.", false);
                BindGrid();
            }
            catch (Exception ex)
            {
                ShowMessage("خطا در افزودن رکوردهای پیش‌فرض: " + ex.Message, true);
            }
        }

        private void ShowMessage(string message, bool isError)
        {
            phMessages.Controls.Clear();
            var lbl = new Label { Text = message, CssClass = isError ? "text-danger" : "text-success" };
            phMessages.Controls.Add(lbl);
        }

        [Serializable]
        private sealed class ColumnInfo
        {
            public string Name { get; set; }
            public string DataType { get; set; }
            public bool IsNullable { get; set; }
            public bool IsIdentity { get; set; }
            public bool IsPrimaryKey { get; set; }
        }

        private static bool IsImageColumn(string columnName)
        {
            string n = columnName.ToLowerInvariant();
            return n.Contains("image") || n.Contains("logo") || n.Contains("pic") || n.Contains("photo");
        }

        private static bool IsIntegerLike(string dataType)
        {
            string t = (dataType ?? string.Empty).ToLowerInvariant();
            return t == "int" || t == "bigint" || t == "smallint" || t == "tinyint";
        }

        private static bool IsDecimalLike(string dataType)
        {
            string t = (dataType ?? string.Empty).ToLowerInvariant();
            return t == "decimal" || t == "numeric" || t == "money" || t == "smallmoney" || t == "float" || t == "real";
        }

        private static bool IsDateLike(string dataType)
        {
            string t = (dataType ?? string.Empty).ToLowerInvariant();
            return t.Contains("date") || t.Contains("time");
        }

        private static bool NameSuggestsCreatedAt(string columnName)
        {
            string n = (columnName ?? string.Empty).ToLowerInvariant();
            return n.Contains("created") || n.Contains("createdat") || n.Contains("insertdate") || n.Contains("created_date");
        }

        private static void AddIfColumn(Dictionary<string, ColumnInfo> map, SqlCommand cmd, List<string> cols, List<string> prms, string name, object val)
        {
            var key = (name ?? string.Empty).ToLowerInvariant();
            if (!map.ContainsKey(key)) return;
            string p = "@p" + cmd.Parameters.Count;
            cols.Add("[" + map[key].Name + "]");
            prms.Add(p);
            cmd.Parameters.AddWithValue(p, val ?? DBNull.Value);
        }
    }
}


